package com.example.demo;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import model.Customer;

import java.sql.*;

public class CustomerController {
    @FXML private TableView<Customer> customerTable;
    @FXML private TableColumn<Customer, Integer> idCol;
    @FXML private TableColumn<Customer, String> nameCol;
    @FXML private TableColumn<Customer, String> contactCol;
    @FXML private TableColumn<Customer, String> drivingLicenseCol; // Updated
    @FXML private TableColumn<Customer, String> rentalHistoryCol;

    @FXML private TextField idField;
    @FXML private TextField nameField;
    @FXML private TextField contactField;
    @FXML private TextField drivingLicenseField; // Updated
    @FXML private TextArea rentalHistoryField;
    @FXML private TextField searchField;

    private final ObservableList<Customer> customerList = FXCollections.observableArrayList();

    @FXML
    public void initialize() {
        idCol.setCellValueFactory(c -> c.getValue().idProperty().asObject());
        nameCol.setCellValueFactory(c -> c.getValue().nameProperty());
        contactCol.setCellValueFactory(c -> c.getValue().contactProperty());
        drivingLicenseCol.setCellValueFactory(c -> c.getValue().drivingLicenseProperty()); // Updated
        rentalHistoryCol.setCellValueFactory(c -> c.getValue().rentalHistoryProperty());

        customerTable.setItems(customerList);

        customerTable.getSelectionModel().selectedItemProperty().addListener((obs, oldSel, newSel) -> {
            if (newSel != null) {
                idField.setText(String.valueOf(newSel.getId()));
                nameField.setText(newSel.getName());
                contactField.setText(newSel.getContact());
                drivingLicenseField.setText(newSel.getDrivingLicense()); // Updated
                rentalHistoryField.setText(newSel.getRentalHistory());
            }
        });

        loadCustomersFromDatabase();
    }

    private void loadCustomersFromDatabase() {
        customerList.clear();
        try (Connection conn = DatabaseConnection.getConnection()) {
            String sql = "SELECT * FROM customers";
            PreparedStatement stmt = conn.prepareStatement(sql);
            ResultSet rs = stmt.executeQuery();

            while (rs.next()) {
                Customer c = new Customer(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("contact"),
                        rs.getString("driving_license"), // Updated
                        rs.getString("rental_history")
                );
                customerList.add(c);
            }
        } catch (Exception e) {
            showAlert(Alert.AlertType.ERROR, "Database Error", "Could not load customers: " + e.getMessage());
        }
    }

    @FXML
    private void handleAdd() {
        try {
            // Validate
            if (nameField.getText().isEmpty() || contactField.getText().isEmpty() || drivingLicenseField.getText().isEmpty()) {
                showAlert(Alert.AlertType.WARNING, "Validation Error", "Please fill in all fields except rental history.");
                return;
            }

            String name = nameField.getText();
            String contact = contactField.getText();
            String drivingLicense = drivingLicenseField.getText();
            String history = rentalHistoryField.getText();

            // Initialize the customer without the ID, which will be generated by the database
            Customer c = new Customer(0, name, contact, drivingLicense, history);

            try (Connection conn = DatabaseConnection.getConnection()) {
                String sql = "INSERT INTO customers (name, contact, driving_license, rental_history) VALUES (?, ?, ?, ?)";
                PreparedStatement stmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);
                stmt.setString(1, name);
                stmt.setString(2, contact);
                stmt.setString(3, drivingLicense);
                stmt.setString(4, history);

                int affectedRows = stmt.executeUpdate();

                // Check if the insertion was successful and retrieve the generated ID
                if (affectedRows > 0) {
                    try (ResultSet generatedKeys = stmt.getGeneratedKeys()) {
                        if (generatedKeys.next()) {
                            int generatedId = generatedKeys.getInt(1); // Retrieve the generated ID
                            c.setId(generatedId); // Set the ID to the Customer object
                        }
                    }
                }
            }

            customerList.add(c); // Add the customer to the list after retrieving the ID
            clearForm();
            showAlert(Alert.AlertType.INFORMATION, "Success", "Customer added successfully.");
        } catch (Exception e) {
            showAlert(Alert.AlertType.ERROR, "Error", "Could not add customer: " + e.getMessage());
        }
    }

    @FXML
    private void handleUpdate() {
        Customer sel = customerTable.getSelectionModel().getSelectedItem();
        if (sel != null) {
            try {
                int id = Integer.parseInt(idField.getText());
                String name = nameField.getText();
                String contact = contactField.getText();
                String drivingLicense = drivingLicenseField.getText(); // Updated
                String history = rentalHistoryField.getText();

                if (name.isEmpty() || contact.isEmpty() || drivingLicense.isEmpty()) {
                    showAlert(Alert.AlertType.WARNING, "Validation Error", "Please fill in all fields except rental history.");
                    return;
                }

                try (Connection conn = DatabaseConnection.getConnection()) {
                    String sql = "UPDATE customers SET name = ?, contact = ?, driving_license = ?, rental_history = ? WHERE id = ?";
                    PreparedStatement stmt = conn.prepareStatement(sql);
                    stmt.setString(1, name);
                    stmt.setString(2, contact);
                    stmt.setString(3, drivingLicense); // Updated
                    stmt.setString(4, history);
                    stmt.setInt(5, id);
                    stmt.executeUpdate();
                }

                sel.setName(name);
                sel.setContact(contact);
                sel.setDrivingLicense(drivingLicense); // Updated
                sel.setRentalHistory(history);
                customerTable.refresh();
                clearForm();
                showAlert(Alert.AlertType.INFORMATION, "Success", "Customer updated successfully.");
            } catch (Exception e) {
                showAlert(Alert.AlertType.ERROR, "Error", "Could not update customer: " + e.getMessage());
            }
        } else {
            showAlert(Alert.AlertType.WARNING, "No Selection", "Please select a customer to update.");
        }
    }

    @FXML
    private void handleDelete() {
        Customer sel = customerTable.getSelectionModel().getSelectedItem();
        if (sel != null) {
            Alert confirm = new Alert(Alert.AlertType.CONFIRMATION,
                    "Are you sure you want to delete this customer?",
                    ButtonType.YES, ButtonType.NO);
            confirm.showAndWait();

            if (confirm.getResult() == ButtonType.YES) {
                try (Connection conn = DatabaseConnection.getConnection()) {
                    String sql = "DELETE FROM customers WHERE id = ?";
                    PreparedStatement stmt = conn.prepareStatement(sql);
                    stmt.setInt(1, sel.getId());
                    stmt.executeUpdate();
                    customerList.remove(sel);
                    clearForm();
                    showAlert(Alert.AlertType.INFORMATION, "Success", "Customer deleted successfully.");
                } catch (Exception e) {
                    showAlert(Alert.AlertType.ERROR, "Error", "Could not delete customer: " + e.getMessage());
                }
            }
        } else {
            showAlert(Alert.AlertType.WARNING, "No Selection", "Please select a customer to delete.");
        }
    }

    private void clearForm() {
        idField.clear();
        nameField.clear();
        contactField.clear();
        drivingLicenseField.clear(); // Updated
        rentalHistoryField.clear();
        searchField.clear();
        customerTable.getSelectionModel().clearSelection();
        customerTable.setItems(customerList);
    }

    private void showAlert(Alert.AlertType type, String title, String msg) {
        Alert alert = new Alert(type);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(msg);
        alert.showAndWait();
    }
}
